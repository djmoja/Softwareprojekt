// Prisma Schema für DS-Projektplanungstool
// Datenbank: PostgreSQL (Cloud SQL)

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// 1. USER & AUTHENTICATION
// ========================================

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String // Für Auth (bcrypt)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationen
  workspaces      WorkspaceMember[]
  ownedProjects   Project[]         @relation("ProjectOwner")
  assignedTasks   Task[]            @relation("TaskAssignee")
  artifactReviews ArtifactReview[]
  TeamMember      TeamMember[]

  @@map("users")
}

// ========================================
// 2. WORKSPACE (Arbeitsbereiche)
// ========================================

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationen
  members  WorkspaceMember[]
  projects Project[]

  @@map("workspaces")
}

model WorkspaceMember {
  id   String @id @default(cuid())
  role Role   @default(VIEWER)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

enum Role {
  OWNER
  VIEWER
}

// ========================================
// 3. Team Management
// ========================================
model TeamMember {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role     TeamRole
  isActive Boolean  @default(true)

  assignedAt DateTime  @default(now())
  removedAt  DateTime?

  @@unique([projectId, userId])
  @@index([projectId, role])
  @@map("team_members")
}

enum TeamRole {
  PROJECT_MANAGER // Projektkoordination [file:169]
  DATA_SCIENTIST // Modellierung, Analyse [file:169][file:170]
  DATA_ENGINEER // Dateninfrastruktur [file:169][file:170]
  BUSINESS_USER // Domänenexpertise [file:169][file:171]
  DOMAIN_EXPERT // Fachliche Anforderungen [file:169]
  IT_INFRASTRUCTURE // Deployment, Operations [file:169]
}

// ========================================
// 4. PROJECT (Projekte)
// ========================================

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)

  startDate DateTime?
  endDate   DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  profile    ProjectProfile?
  phases     Phase[]
  tasks      Task[]
  milestones Milestone[]
  risks      Risk[]
  TeamMember TeamMember[]
  Iteration  Iteration[]

  @@index([workspaceId, status])
  @@index([ownerId])
  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// ========================================
// 4. PROJECT PROFILE (Projekt-Steckbrief)
// ========================================

model ProjectProfile {
  id String @id @default(cuid())

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Wizard-Ergebnis (8-12 Fragen)
  analyticsType String? // "Classification", "Regression", "Clustering", etc.
  dataVolume    DataScale? // SMALL, MEDIUM, LARGE, VERY_LARGE
  dataVariety   DataScale? // Struktur/Vielfalt
  dataVelocity  DataScale? // Geschwindigkeit
  dataVeracity  DataScale? // Qualität/Zuverlässigkeit

  // Projekt-Charakteristika
  targetMetrics  String? // Ziel-Metriken (JSON Array)
  teamSize       Int?
  hasDeadline    Boolean @default(false)
  iterationCount Int     @default(1)

  // Plan-Engine Ergebnisse
  phasingWeights   Json? // Gewichtung der Phasen (JSON Object)
  bufferPercentage Int   @default(15) // 10-20% Puffer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === Team Context  ===
  teamVirtuality    TeamVirtuality?
  managerExperience ManagerExperience?

  // === Computational Context  ===
  computeIntensity ComputeIntensity?
  timelinessLevel  TimelinessLevel?

  // === Discovery Level  ===
  discoveryType DiscoveryType?
  roiFocused    Boolean        @default(false)

  // === Organizational Context ===
  orgSize            OrgSize?
  orgCultureStrength CultureStrength?

  @@map("project_profiles")
}

enum DataScale {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum TeamVirtuality {
  COLOCATED
  PARTIALLY_DISTRIBUTED
  FULLY_DISTRIBUTED
}

enum ManagerExperience {
  NOVICE
  INTERMEDIATE
  EXPERIENCED
}

enum ComputeIntensity {
  MINIMAL
  PREPROCESSING_HEAVY
  MODELING_HEAVY
  BOTH_HEAVY
}

enum TimelinessLevel {
  BATCH // Keine Echtzeit
  DAILY // Tägliche Updates
  NEARREALTIME // Minuten
  REALTIME // Sekunden
}

enum DiscoveryType {
  HYPOTHESIS_TESTING // Klar definierte Fragen [file:171]
  HYPOTHESIS_GENERATION // Exploration [file:171]
  EXPLORATORY // Unstrukturierte Suche
}

enum OrgSize {
  SMALL
  MEDIUM
  LARGE
}

enum CultureStrength {
  WEAK
  MEDIUM
  STRONG
}

// ========================================
// 5. PHASE (DS-Lifecycle Phasen)
// ========================================

model Phase {
  id         String    @id @default(cuid())
  name       String
  type       PhaseType
  orderIndex Int // Reihenfolge (1-6)

  startDate DateTime?
  endDate   DateTime?
  duration  Int? // Tage

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  tasks      Task[]
  artifacts  Artifact[]
  milestones Milestone[]

  @@unique([projectId, orderIndex])
  @@map("phases")
}

enum PhaseType {
  BUSINESS_UNDERSTANDING
  DATA_COLLECTION
  DATA_EXPLORATION
  DATA_PREPARATION
  ANALYSIS_MODELING
  EVALUATION
  DEPLOYMENT_UTILIZATION
}

// ========================================
// 6. TASK (Aufgaben)
// ========================================

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)

  startDate DateTime?
  endDate   DateTime?
  duration  Int? // Tage

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  phaseId String
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  dependencies Dependency[] @relation("DependentTask")
  dependents   Dependency[] @relation("PredecessorTask")

  @@index([projectId, status])
  @@index([phaseId])
  @@index([assigneeId])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
}

// ========================================
// 7. DEPENDENCY (Abhängigkeiten)
// ========================================

model Dependency {
  id   String         @id @default(cuid())
  type DependencyType @default(FINISH_TO_START)

  predecessorId String
  predecessor   Task   @relation("PredecessorTask", fields: [predecessorId], references: [id], onDelete: Cascade)

  dependentId String
  dependent   Task   @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)

  lag Int @default(0) // Verzögerung in Tagen

  createdAt DateTime @default(now())

  @@unique([predecessorId, dependentId])
  @@map("dependencies")
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
}

// ========================================
// 8. MILESTONE (Gates)
// ========================================

model Milestone {
  id   String        @id @default(cuid())
  name String
  type MilestoneType

  dueDate DateTime?
  status  MilestoneStatus @default(PENDING)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  phaseId String
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, phaseId, status])
  @@map("milestones")
}

enum MilestoneType {
  PHASE_GATE
  ITERATION_REVIEW
  FINAL_DELIVERY
}

enum MilestoneStatus {
  PENDING
  APPROVED
  REJECTED
  ON_HOLD
}

// ========================================
// 9. ARTIFACT (Artefakte/Dokumente)
// ========================================

model Artifact {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        ArtifactType
  isMandatory Boolean      @default(false)

  fileUrl  String? // Cloud Storage URL
  fileName String?
  fileSize Int? // Bytes

  status ArtifactStatus @default(DRAFT)

  phaseId String
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationen
  reviews ArtifactReview[]

  @@index([phaseId, status])
  @@map("artifacts")
}

enum ArtifactType {
  PROBLEM_STATEMENT
  DATA_PROFILE
  DATA_SOURCES_CATALOGUE
  DATA_QUALITY_REPORT
  FEATURE_SPECIFICATION
  MODEL_DOCUMENTATION
  EVALUATION_REPORT
  DEPLOYMENT_PLAN
  MONITORING_PLAN
  PROJECT_CHARTER // Business Understanding
  COST_BENEFIT_ANALYSIS // Business Understanding
  TEST_PLAN // Deployment
  DATA_PIPELINE_DESIGN // Data Preparation
  HYPOTHESIS_DOCUMENT // Analysis
  OTHER
}

enum ArtifactStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

// ========================================
// 10. ARTIFACT REVIEW (Freigabe)
// ========================================

model ArtifactReview {
  id       String         @id @default(cuid())
  decision ReviewDecision
  comment  String?

  artifactId String
  artifact   Artifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])

  createdAt DateTime @default(now())

  @@map("artifact_reviews")
}

enum ReviewDecision {
  APPROVED
  REJECTED
  NEEDS_REVISION
}

// ========================================
// 11. RISK (Risiko-Hinweise)
// ========================================

model Risk {
  id          String       @id @default(cuid())
  title       String
  description String
  category    RiskCategory
  severity    RiskSeverity
  status      RiskStatus   @default(OPEN)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, category, severity, status])
  @@map("risks")
}

enum RiskCategory {
  DATA_QUALITY
  DATA_AVAILABILITY
  TECHNICAL_COMPLEXITY
  RESOURCE_CONSTRAINT
  TIMELINE
  OTHER
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskStatus {
  OPEN
  MITIGATED
  ACCEPTED
  RESOLVED
}

// ========================================
// 12. Iterationen
// ========================================
model Iteration {
  id String @id @default(cuid())

  number     Int
  goal       String?
  hypothesis String? // Für Hypothesis-Testing [file:171]
  outcome    String?
  learnings  String? // Was wurde gelernt?

  startDate DateTime?
  endDate   DateTime?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, number])
  @@map("iterations")
}
